Terminals unused in grammar

   PROCEDURE
   comment
   mono_comment
   mul_equal
   div_equal
   minus_equal
   plus_equal
   quest


State 19 conflicts: 1 shift/reduce
State 22 conflicts: 1 shift/reduce
State 23 conflicts: 1 shift/reduce
State 124 conflicts: 1 shift/reduce


Grammar

    0 $accept: axiom $end

    1 axiom: procedures main_func
    2      | main_func

    3 main_func: type MAIN LEFT_BRACKET declaration_args RIGHT_BRACKET LEFT_FIGURE declarations operators RIGHT_FIGURE

    4 procedures: procedure
    5           | procedures procedure

    6 procedureDeclaration: type IDENT LEFT_BRACKET declaration_args RIGHT_BRACKET

    7 procedure: procedureDeclaration LEFT_FIGURE declarations operators RIGHT_FIGURE

    8 declaration_arg: type IDENT
    9                | type IDENT left_sqBracket right_sqBracket

   10 declaration_args: %empty
   11                 | declaration_arg
   12                 | declaration_arg COMMA declaration_args

   13 declaration: type IDENT SEMICOLON
   14            | type IDENT left_sqBracket NUMBER right_sqBracket SEMICOLON
   15            | type IDENT left_sqBracket right_sqBracket ASSIGNMENT STRING SEMICOLON

   16 declarations: %empty
   17             | declaration declarations
   18             | error declarations

   19 args: %empty
   20     | arg
   21     | args COMMA arg

   22 arg: IDENT
   23    | NUMBER
   24    | STRING

   25 operators: %empty
   26          | operator operators
   27          | error operators

   28 Code_block: LEFT_FIGURE operators RIGHT_FIGURE
   29           | operator

   30 WHILE_cycle: WHILE LEFT_BRACKET statement RIGHT_BRACKET Code_block

   31 OUTP_func: OUTP LEFT_BRACKET arg RIGHT_BRACKET

   32 INP_func: INP LEFT_BRACKET IDENT RIGHT_BRACKET

   33 operator: statement SEMICOLON
   34         | WHILE_cycle
   35         | OUTP_func SEMICOLON
   36         | INP_func SEMICOLON

   37 array_access: IDENT left_sqBracket logical_expr right_sqBracket

   38 statement: logical_expr
   39          | IDENT ASSIGNMENT logical_expr
   40          | array_access ASSIGNMENT logical_expr

   41 logical_expr: logical_or_expr
   42             | logical_expr not_equal logical_or_expr
   43             | logical_expr less logical_or_expr
   44             | logical_expr more logical_or_expr
   45             | logical_expr compare logical_or_expr
   46             | logical_expr less_equal logical_or_expr
   47             | logical_expr more_equal logical_or_expr

   48 logical_or_expr: logical_and_expr
   49                | logical_or_expr or logical_and_expr

   50 logical_and_expr: plus_expr
   51                 | logical_and_expr and plus_expr

   52 plus_expr: mul_expr
   53          | plus_expr plus mul_expr
   54          | plus_expr minus mul_expr
   55          | plus_expr plus error
   56          | plus_expr minus error

   57 mul_expr: unary_expr
   58         | mul_expr division unary_expr
   59         | mul_expr division error

   60 unary_expr: primary
   61           | minus unary_expr
   62           | unary_expr inc
   63           | unary_expr dec
   64           | not unary_expr

   65 primary: NUMBER
   66        | IDENT
   67        | LEFT_BRACKET statement RIGHT_BRACKET
   68        | IDENT LEFT_BRACKET args RIGHT_BRACKET
   69        | array_access

   70 type: INT
   71     | CHAR
   72     | VOID
   73     | INT POINTER
   74     | CHAR POINTER
   75     | VOID POINTER
   76     | INT LINK
   77     | CHAR LINK
   78     | VOID LINK


Terminals, with rules where they appear

$end (0) 0
error (256) 18 27 55 56 59
VOID (258) 72 75 78
INT (259) 70 73 76
CHAR (260) 71 74 77
POINTER (261) 73 74 75
LINK (262) 76 77 78
PROCEDURE (263)
OUTP (264) 31
INP (265) 32
MAIN (266) 3
WHILE (267) 30
IDENT (268) 6 8 9 13 14 15 22 32 37 39 66 68
COMMA (269) 12 21
SEMICOLON (270) 13 14 15 33 35 36
STRING (271) 15 24
ASSIGNMENT (272) 15 39 40
NUMBER (273) 14 23 65
left_sqBracket (274) 9 14 15 37
right_sqBracket (275) 9 14 15 37
LEFT_BRACKET (276) 3 6 30 31 32 67 68
RIGHT_BRACKET (277) 3 6 30 31 32 67 68
RIGHT_FIGURE (278) 3 7 28
LEFT_FIGURE (279) 3 7 28
comment (280)
mono_comment (281)
not (282) 64
division (283) 58 59
minus (284) 54 56 61
plus (285) 53 55
compare (286) 45
not_equal (287) 42
mul_equal (288)
div_equal (289)
minus_equal (290)
plus_equal (291)
inc (292) 62
dec (293) 63
more_equal (294) 47
less_equal (295) 46
more (296) 44
less (297) 43
and (298) 51
or (299) 49
quest (300)
uminus (301)


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
axiom (48)
    on left: 1 2, on right: 0
main_func (49)
    on left: 3, on right: 1 2
procedures (50)
    on left: 4 5, on right: 1 5
procedureDeclaration (51)
    on left: 6, on right: 7
procedure (52)
    on left: 7, on right: 4 5
declaration_arg (53)
    on left: 8 9, on right: 11 12
declaration_args (54)
    on left: 10 11 12, on right: 3 6 12
declaration (55)
    on left: 13 14 15, on right: 17
declarations (56)
    on left: 16 17 18, on right: 3 7 17 18
args (57)
    on left: 19 20 21, on right: 21 68
arg (58)
    on left: 22 23 24, on right: 20 21 31
operators (59)
    on left: 25 26 27, on right: 3 7 26 27 28
Code_block (60)
    on left: 28 29, on right: 30
WHILE_cycle (61)
    on left: 30, on right: 34
OUTP_func (62)
    on left: 31, on right: 35
INP_func (63)
    on left: 32, on right: 36
operator (64)
    on left: 33 34 35 36, on right: 26 29
array_access (65)
    on left: 37, on right: 40 69
statement (66)
    on left: 38 39 40, on right: 30 33 67
logical_expr (67)
    on left: 41 42 43 44 45 46 47, on right: 37 38 39 40 42 43 44 45
    46 47
logical_or_expr (68)
    on left: 48 49, on right: 41 42 43 44 45 46 47 49
logical_and_expr (69)
    on left: 50 51, on right: 48 49 51
plus_expr (70)
    on left: 52 53 54 55 56, on right: 50 51 53 54 55 56
mul_expr (71)
    on left: 57 58 59, on right: 52 53 54 58 59
unary_expr (72)
    on left: 60 61 62 63 64, on right: 57 58 61 62 63 64
primary (73)
    on left: 65 66 67 68 69, on right: 60
type (74)
    on left: 70 71 72 73 74 75 76 77 78, on right: 3 6 8 9 13 14 15


State 0

    0 $accept: . axiom $end

    VOID  shift, and go to state 1
    INT   shift, and go to state 2
    CHAR  shift, and go to state 3

    axiom                 go to state 4
    main_func             go to state 5
    procedures            go to state 6
    procedureDeclaration  go to state 7
    procedure             go to state 8
    type                  go to state 9


State 1

   72 type: VOID .
   75     | VOID . POINTER
   78     | VOID . LINK

    POINTER  shift, and go to state 10
    LINK     shift, and go to state 11

    $default  reduce using rule 72 (type)


State 2

   70 type: INT .
   73     | INT . POINTER
   76     | INT . LINK

    POINTER  shift, and go to state 12
    LINK     shift, and go to state 13

    $default  reduce using rule 70 (type)


State 3

   71 type: CHAR .
   74     | CHAR . POINTER
   77     | CHAR . LINK

    POINTER  shift, and go to state 14
    LINK     shift, and go to state 15

    $default  reduce using rule 71 (type)


State 4

    0 $accept: axiom . $end

    $end  shift, and go to state 16


State 5

    2 axiom: main_func .

    $default  reduce using rule 2 (axiom)


State 6

    1 axiom: procedures . main_func
    5 procedures: procedures . procedure

    VOID  shift, and go to state 1
    INT   shift, and go to state 2
    CHAR  shift, and go to state 3

    main_func             go to state 17
    procedureDeclaration  go to state 7
    procedure             go to state 18
    type                  go to state 9


State 7

    7 procedure: procedureDeclaration . LEFT_FIGURE declarations operators RIGHT_FIGURE

    LEFT_FIGURE  shift, and go to state 19


State 8

    4 procedures: procedure .

    $default  reduce using rule 4 (procedures)


State 9

    3 main_func: type . MAIN LEFT_BRACKET declaration_args RIGHT_BRACKET LEFT_FIGURE declarations operators RIGHT_FIGURE
    6 procedureDeclaration: type . IDENT LEFT_BRACKET declaration_args RIGHT_BRACKET

    MAIN   shift, and go to state 20
    IDENT  shift, and go to state 21


State 10

   75 type: VOID POINTER .

    $default  reduce using rule 75 (type)


State 11

   78 type: VOID LINK .

    $default  reduce using rule 78 (type)


State 12

   73 type: INT POINTER .

    $default  reduce using rule 73 (type)


State 13

   76 type: INT LINK .

    $default  reduce using rule 76 (type)


State 14

   74 type: CHAR POINTER .

    $default  reduce using rule 74 (type)


State 15

   77 type: CHAR LINK .

    $default  reduce using rule 77 (type)


State 16

    0 $accept: axiom $end .

    $default  accept


State 17

    1 axiom: procedures main_func .

    $default  reduce using rule 1 (axiom)


State 18

    5 procedures: procedures procedure .

    $default  reduce using rule 5 (procedures)


State 19

    7 procedure: procedureDeclaration LEFT_FIGURE . declarations operators RIGHT_FIGURE

    error  shift, and go to state 22
    VOID   shift, and go to state 1
    INT    shift, and go to state 2
    CHAR   shift, and go to state 3

    error         [reduce using rule 16 (declarations)]
    OUTP          reduce using rule 16 (declarations)
    INP           reduce using rule 16 (declarations)
    WHILE         reduce using rule 16 (declarations)
    IDENT         reduce using rule 16 (declarations)
    NUMBER        reduce using rule 16 (declarations)
    LEFT_BRACKET  reduce using rule 16 (declarations)
    RIGHT_FIGURE  reduce using rule 16 (declarations)
    not           reduce using rule 16 (declarations)
    minus         reduce using rule 16 (declarations)

    declaration   go to state 23
    declarations  go to state 24
    type          go to state 25


State 20

    3 main_func: type MAIN . LEFT_BRACKET declaration_args RIGHT_BRACKET LEFT_FIGURE declarations operators RIGHT_FIGURE

    LEFT_BRACKET  shift, and go to state 26


State 21

    6 procedureDeclaration: type IDENT . LEFT_BRACKET declaration_args RIGHT_BRACKET

    LEFT_BRACKET  shift, and go to state 27


State 22

   18 declarations: error . declarations

    error  shift, and go to state 22
    VOID   shift, and go to state 1
    INT    shift, and go to state 2
    CHAR   shift, and go to state 3

    error         [reduce using rule 16 (declarations)]
    OUTP          reduce using rule 16 (declarations)
    INP           reduce using rule 16 (declarations)
    WHILE         reduce using rule 16 (declarations)
    IDENT         reduce using rule 16 (declarations)
    NUMBER        reduce using rule 16 (declarations)
    LEFT_BRACKET  reduce using rule 16 (declarations)
    RIGHT_FIGURE  reduce using rule 16 (declarations)
    not           reduce using rule 16 (declarations)
    minus         reduce using rule 16 (declarations)

    declaration   go to state 23
    declarations  go to state 28
    type          go to state 25


State 23

   17 declarations: declaration . declarations

    error  shift, and go to state 22
    VOID   shift, and go to state 1
    INT    shift, and go to state 2
    CHAR   shift, and go to state 3

    error         [reduce using rule 16 (declarations)]
    OUTP          reduce using rule 16 (declarations)
    INP           reduce using rule 16 (declarations)
    WHILE         reduce using rule 16 (declarations)
    IDENT         reduce using rule 16 (declarations)
    NUMBER        reduce using rule 16 (declarations)
    LEFT_BRACKET  reduce using rule 16 (declarations)
    RIGHT_FIGURE  reduce using rule 16 (declarations)
    not           reduce using rule 16 (declarations)
    minus         reduce using rule 16 (declarations)

    declaration   go to state 23
    declarations  go to state 29
    type          go to state 25


State 24

    7 procedure: procedureDeclaration LEFT_FIGURE declarations . operators RIGHT_FIGURE

    error         shift, and go to state 30
    OUTP          shift, and go to state 31
    INP           shift, and go to state 32
    WHILE         shift, and go to state 33
    IDENT         shift, and go to state 34
    NUMBER        shift, and go to state 35
    LEFT_BRACKET  shift, and go to state 36
    not           shift, and go to state 37
    minus         shift, and go to state 38

    RIGHT_FIGURE  reduce using rule 25 (operators)

    operators         go to state 39
    WHILE_cycle       go to state 40
    OUTP_func         go to state 41
    INP_func          go to state 42
    operator          go to state 43
    array_access      go to state 44
    statement         go to state 45
    logical_expr      go to state 46
    logical_or_expr   go to state 47
    logical_and_expr  go to state 48
    plus_expr         go to state 49
    mul_expr          go to state 50
    unary_expr        go to state 51
    primary           go to state 52


State 25

   13 declaration: type . IDENT SEMICOLON
   14            | type . IDENT left_sqBracket NUMBER right_sqBracket SEMICOLON
   15            | type . IDENT left_sqBracket right_sqBracket ASSIGNMENT STRING SEMICOLON

    IDENT  shift, and go to state 53


State 26

    3 main_func: type MAIN LEFT_BRACKET . declaration_args RIGHT_BRACKET LEFT_FIGURE declarations operators RIGHT_FIGURE

    VOID  shift, and go to state 1
    INT   shift, and go to state 2
    CHAR  shift, and go to state 3

    $default  reduce using rule 10 (declaration_args)

    declaration_arg   go to state 54
    declaration_args  go to state 55
    type              go to state 56


State 27

    6 procedureDeclaration: type IDENT LEFT_BRACKET . declaration_args RIGHT_BRACKET

    VOID  shift, and go to state 1
    INT   shift, and go to state 2
    CHAR  shift, and go to state 3

    $default  reduce using rule 10 (declaration_args)

    declaration_arg   go to state 54
    declaration_args  go to state 57
    type              go to state 56


State 28

   18 declarations: error declarations .

    $default  reduce using rule 18 (declarations)


State 29

   17 declarations: declaration declarations .

    $default  reduce using rule 17 (declarations)


State 30

   27 operators: error . operators

    error         shift, and go to state 30
    OUTP          shift, and go to state 31
    INP           shift, and go to state 32
    WHILE         shift, and go to state 33
    IDENT         shift, and go to state 34
    NUMBER        shift, and go to state 35
    LEFT_BRACKET  shift, and go to state 36
    not           shift, and go to state 37
    minus         shift, and go to state 38

    RIGHT_FIGURE  reduce using rule 25 (operators)

    operators         go to state 58
    WHILE_cycle       go to state 40
    OUTP_func         go to state 41
    INP_func          go to state 42
    operator          go to state 43
    array_access      go to state 44
    statement         go to state 45
    logical_expr      go to state 46
    logical_or_expr   go to state 47
    logical_and_expr  go to state 48
    plus_expr         go to state 49
    mul_expr          go to state 50
    unary_expr        go to state 51
    primary           go to state 52


State 31

   31 OUTP_func: OUTP . LEFT_BRACKET arg RIGHT_BRACKET

    LEFT_BRACKET  shift, and go to state 59


State 32

   32 INP_func: INP . LEFT_BRACKET IDENT RIGHT_BRACKET

    LEFT_BRACKET  shift, and go to state 60


State 33

   30 WHILE_cycle: WHILE . LEFT_BRACKET statement RIGHT_BRACKET Code_block

    LEFT_BRACKET  shift, and go to state 61


State 34

   37 array_access: IDENT . left_sqBracket logical_expr right_sqBracket
   39 statement: IDENT . ASSIGNMENT logical_expr
   66 primary: IDENT .
   68        | IDENT . LEFT_BRACKET args RIGHT_BRACKET

    ASSIGNMENT      shift, and go to state 62
    left_sqBracket  shift, and go to state 63
    LEFT_BRACKET    shift, and go to state 64

    $default  reduce using rule 66 (primary)


State 35

   65 primary: NUMBER .

    $default  reduce using rule 65 (primary)


State 36

   67 primary: LEFT_BRACKET . statement RIGHT_BRACKET

    IDENT         shift, and go to state 34
    NUMBER        shift, and go to state 35
    LEFT_BRACKET  shift, and go to state 36
    not           shift, and go to state 37
    minus         shift, and go to state 38

    array_access      go to state 44
    statement         go to state 65
    logical_expr      go to state 46
    logical_or_expr   go to state 47
    logical_and_expr  go to state 48
    plus_expr         go to state 49
    mul_expr          go to state 50
    unary_expr        go to state 51
    primary           go to state 52


State 37

   64 unary_expr: not . unary_expr

    IDENT         shift, and go to state 66
    NUMBER        shift, and go to state 35
    LEFT_BRACKET  shift, and go to state 36
    not           shift, and go to state 37
    minus         shift, and go to state 38

    array_access  go to state 67
    unary_expr    go to state 68
    primary       go to state 52


State 38

   61 unary_expr: minus . unary_expr

    IDENT         shift, and go to state 66
    NUMBER        shift, and go to state 35
    LEFT_BRACKET  shift, and go to state 36
    not           shift, and go to state 37
    minus         shift, and go to state 38

    array_access  go to state 67
    unary_expr    go to state 69
    primary       go to state 52


State 39

    7 procedure: procedureDeclaration LEFT_FIGURE declarations operators . RIGHT_FIGURE

    RIGHT_FIGURE  shift, and go to state 70


State 40

   34 operator: WHILE_cycle .

    $default  reduce using rule 34 (operator)


State 41

   35 operator: OUTP_func . SEMICOLON

    SEMICOLON  shift, and go to state 71


State 42

   36 operator: INP_func . SEMICOLON

    SEMICOLON  shift, and go to state 72


State 43

   26 operators: operator . operators

    error         shift, and go to state 30
    OUTP          shift, and go to state 31
    INP           shift, and go to state 32
    WHILE         shift, and go to state 33
    IDENT         shift, and go to state 34
    NUMBER        shift, and go to state 35
    LEFT_BRACKET  shift, and go to state 36
    not           shift, and go to state 37
    minus         shift, and go to state 38

    RIGHT_FIGURE  reduce using rule 25 (operators)

    operators         go to state 73
    WHILE_cycle       go to state 40
    OUTP_func         go to state 41
    INP_func          go to state 42
    operator          go to state 43
    array_access      go to state 44
    statement         go to state 45
    logical_expr      go to state 46
    logical_or_expr   go to state 47
    logical_and_expr  go to state 48
    plus_expr         go to state 49
    mul_expr          go to state 50
    unary_expr        go to state 51
    primary           go to state 52


State 44

   40 statement: array_access . ASSIGNMENT logical_expr
   69 primary: array_access .

    ASSIGNMENT  shift, and go to state 74

    $default  reduce using rule 69 (primary)


State 45

   33 operator: statement . SEMICOLON

    SEMICOLON  shift, and go to state 75


State 46

   38 statement: logical_expr .
   42 logical_expr: logical_expr . not_equal logical_or_expr
   43             | logical_expr . less logical_or_expr
   44             | logical_expr . more logical_or_expr
   45             | logical_expr . compare logical_or_expr
   46             | logical_expr . less_equal logical_or_expr
   47             | logical_expr . more_equal logical_or_expr

    compare     shift, and go to state 76
    not_equal   shift, and go to state 77
    more_equal  shift, and go to state 78
    less_equal  shift, and go to state 79
    more        shift, and go to state 80
    less        shift, and go to state 81

    $default  reduce using rule 38 (statement)


State 47

   41 logical_expr: logical_or_expr .
   49 logical_or_expr: logical_or_expr . or logical_and_expr

    or  shift, and go to state 82

    $default  reduce using rule 41 (logical_expr)


State 48

   48 logical_or_expr: logical_and_expr .
   51 logical_and_expr: logical_and_expr . and plus_expr

    and  shift, and go to state 83

    $default  reduce using rule 48 (logical_or_expr)


State 49

   50 logical_and_expr: plus_expr .
   53 plus_expr: plus_expr . plus mul_expr
   54          | plus_expr . minus mul_expr
   55          | plus_expr . plus error
   56          | plus_expr . minus error

    minus  shift, and go to state 84
    plus   shift, and go to state 85

    $default  reduce using rule 50 (logical_and_expr)


State 50

   52 plus_expr: mul_expr .
   58 mul_expr: mul_expr . division unary_expr
   59         | mul_expr . division error

    division  shift, and go to state 86

    $default  reduce using rule 52 (plus_expr)


State 51

   57 mul_expr: unary_expr .
   62 unary_expr: unary_expr . inc
   63           | unary_expr . dec

    inc  shift, and go to state 87
    dec  shift, and go to state 88

    $default  reduce using rule 57 (mul_expr)


State 52

   60 unary_expr: primary .

    $default  reduce using rule 60 (unary_expr)


State 53

   13 declaration: type IDENT . SEMICOLON
   14            | type IDENT . left_sqBracket NUMBER right_sqBracket SEMICOLON
   15            | type IDENT . left_sqBracket right_sqBracket ASSIGNMENT STRING SEMICOLON

    SEMICOLON       shift, and go to state 89
    left_sqBracket  shift, and go to state 90


State 54

   11 declaration_args: declaration_arg .
   12                 | declaration_arg . COMMA declaration_args

    COMMA  shift, and go to state 91

    $default  reduce using rule 11 (declaration_args)


State 55

    3 main_func: type MAIN LEFT_BRACKET declaration_args . RIGHT_BRACKET LEFT_FIGURE declarations operators RIGHT_FIGURE

    RIGHT_BRACKET  shift, and go to state 92


State 56

    8 declaration_arg: type . IDENT
    9                | type . IDENT left_sqBracket right_sqBracket

    IDENT  shift, and go to state 93


State 57

    6 procedureDeclaration: type IDENT LEFT_BRACKET declaration_args . RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 94


State 58

   27 operators: error operators .

    $default  reduce using rule 27 (operators)


State 59

   31 OUTP_func: OUTP LEFT_BRACKET . arg RIGHT_BRACKET

    IDENT   shift, and go to state 95
    STRING  shift, and go to state 96
    NUMBER  shift, and go to state 97

    arg  go to state 98


State 60

   32 INP_func: INP LEFT_BRACKET . IDENT RIGHT_BRACKET

    IDENT  shift, and go to state 99


State 61

   30 WHILE_cycle: WHILE LEFT_BRACKET . statement RIGHT_BRACKET Code_block

    IDENT         shift, and go to state 34
    NUMBER        shift, and go to state 35
    LEFT_BRACKET  shift, and go to state 36
    not           shift, and go to state 37
    minus         shift, and go to state 38

    array_access      go to state 44
    statement         go to state 100
    logical_expr      go to state 46
    logical_or_expr   go to state 47
    logical_and_expr  go to state 48
    plus_expr         go to state 49
    mul_expr          go to state 50
    unary_expr        go to state 51
    primary           go to state 52


State 62

   39 statement: IDENT ASSIGNMENT . logical_expr

    IDENT         shift, and go to state 66
    NUMBER        shift, and go to state 35
    LEFT_BRACKET  shift, and go to state 36
    not           shift, and go to state 37
    minus         shift, and go to state 38

    array_access      go to state 67
    logical_expr      go to state 101
    logical_or_expr   go to state 47
    logical_and_expr  go to state 48
    plus_expr         go to state 49
    mul_expr          go to state 50
    unary_expr        go to state 51
    primary           go to state 52


State 63

   37 array_access: IDENT left_sqBracket . logical_expr right_sqBracket

    IDENT         shift, and go to state 66
    NUMBER        shift, and go to state 35
    LEFT_BRACKET  shift, and go to state 36
    not           shift, and go to state 37
    minus         shift, and go to state 38

    array_access      go to state 67
    logical_expr      go to state 102
    logical_or_expr   go to state 47
    logical_and_expr  go to state 48
    plus_expr         go to state 49
    mul_expr          go to state 50
    unary_expr        go to state 51
    primary           go to state 52


State 64

   68 primary: IDENT LEFT_BRACKET . args RIGHT_BRACKET

    IDENT   shift, and go to state 95
    STRING  shift, and go to state 96
    NUMBER  shift, and go to state 97

    $default  reduce using rule 19 (args)

    args  go to state 103
    arg   go to state 104


State 65

   67 primary: LEFT_BRACKET statement . RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 105


State 66

   37 array_access: IDENT . left_sqBracket logical_expr right_sqBracket
   66 primary: IDENT .
   68        | IDENT . LEFT_BRACKET args RIGHT_BRACKET

    left_sqBracket  shift, and go to state 63
    LEFT_BRACKET    shift, and go to state 64

    $default  reduce using rule 66 (primary)


State 67

   69 primary: array_access .

    $default  reduce using rule 69 (primary)


State 68

   62 unary_expr: unary_expr . inc
   63           | unary_expr . dec
   64           | not unary_expr .

    $default  reduce using rule 64 (unary_expr)


State 69

   61 unary_expr: minus unary_expr .
   62           | unary_expr . inc
   63           | unary_expr . dec

    $default  reduce using rule 61 (unary_expr)


State 70

    7 procedure: procedureDeclaration LEFT_FIGURE declarations operators RIGHT_FIGURE .

    $default  reduce using rule 7 (procedure)


State 71

   35 operator: OUTP_func SEMICOLON .

    $default  reduce using rule 35 (operator)


State 72

   36 operator: INP_func SEMICOLON .

    $default  reduce using rule 36 (operator)


State 73

   26 operators: operator operators .

    $default  reduce using rule 26 (operators)


State 74

   40 statement: array_access ASSIGNMENT . logical_expr

    IDENT         shift, and go to state 66
    NUMBER        shift, and go to state 35
    LEFT_BRACKET  shift, and go to state 36
    not           shift, and go to state 37
    minus         shift, and go to state 38

    array_access      go to state 67
    logical_expr      go to state 106
    logical_or_expr   go to state 47
    logical_and_expr  go to state 48
    plus_expr         go to state 49
    mul_expr          go to state 50
    unary_expr        go to state 51
    primary           go to state 52


State 75

   33 operator: statement SEMICOLON .

    $default  reduce using rule 33 (operator)


State 76

   45 logical_expr: logical_expr compare . logical_or_expr

    IDENT         shift, and go to state 66
    NUMBER        shift, and go to state 35
    LEFT_BRACKET  shift, and go to state 36
    not           shift, and go to state 37
    minus         shift, and go to state 38

    array_access      go to state 67
    logical_or_expr   go to state 107
    logical_and_expr  go to state 48
    plus_expr         go to state 49
    mul_expr          go to state 50
    unary_expr        go to state 51
    primary           go to state 52


State 77

   42 logical_expr: logical_expr not_equal . logical_or_expr

    IDENT         shift, and go to state 66
    NUMBER        shift, and go to state 35
    LEFT_BRACKET  shift, and go to state 36
    not           shift, and go to state 37
    minus         shift, and go to state 38

    array_access      go to state 67
    logical_or_expr   go to state 108
    logical_and_expr  go to state 48
    plus_expr         go to state 49
    mul_expr          go to state 50
    unary_expr        go to state 51
    primary           go to state 52


State 78

   47 logical_expr: logical_expr more_equal . logical_or_expr

    IDENT         shift, and go to state 66
    NUMBER        shift, and go to state 35
    LEFT_BRACKET  shift, and go to state 36
    not           shift, and go to state 37
    minus         shift, and go to state 38

    array_access      go to state 67
    logical_or_expr   go to state 109
    logical_and_expr  go to state 48
    plus_expr         go to state 49
    mul_expr          go to state 50
    unary_expr        go to state 51
    primary           go to state 52


State 79

   46 logical_expr: logical_expr less_equal . logical_or_expr

    IDENT         shift, and go to state 66
    NUMBER        shift, and go to state 35
    LEFT_BRACKET  shift, and go to state 36
    not           shift, and go to state 37
    minus         shift, and go to state 38

    array_access      go to state 67
    logical_or_expr   go to state 110
    logical_and_expr  go to state 48
    plus_expr         go to state 49
    mul_expr          go to state 50
    unary_expr        go to state 51
    primary           go to state 52


State 80

   44 logical_expr: logical_expr more . logical_or_expr

    IDENT         shift, and go to state 66
    NUMBER        shift, and go to state 35
    LEFT_BRACKET  shift, and go to state 36
    not           shift, and go to state 37
    minus         shift, and go to state 38

    array_access      go to state 67
    logical_or_expr   go to state 111
    logical_and_expr  go to state 48
    plus_expr         go to state 49
    mul_expr          go to state 50
    unary_expr        go to state 51
    primary           go to state 52


State 81

   43 logical_expr: logical_expr less . logical_or_expr

    IDENT         shift, and go to state 66
    NUMBER        shift, and go to state 35
    LEFT_BRACKET  shift, and go to state 36
    not           shift, and go to state 37
    minus         shift, and go to state 38

    array_access      go to state 67
    logical_or_expr   go to state 112
    logical_and_expr  go to state 48
    plus_expr         go to state 49
    mul_expr          go to state 50
    unary_expr        go to state 51
    primary           go to state 52


State 82

   49 logical_or_expr: logical_or_expr or . logical_and_expr

    IDENT         shift, and go to state 66
    NUMBER        shift, and go to state 35
    LEFT_BRACKET  shift, and go to state 36
    not           shift, and go to state 37
    minus         shift, and go to state 38

    array_access      go to state 67
    logical_and_expr  go to state 113
    plus_expr         go to state 49
    mul_expr          go to state 50
    unary_expr        go to state 51
    primary           go to state 52


State 83

   51 logical_and_expr: logical_and_expr and . plus_expr

    IDENT         shift, and go to state 66
    NUMBER        shift, and go to state 35
    LEFT_BRACKET  shift, and go to state 36
    not           shift, and go to state 37
    minus         shift, and go to state 38

    array_access  go to state 67
    plus_expr     go to state 114
    mul_expr      go to state 50
    unary_expr    go to state 51
    primary       go to state 52


State 84

   54 plus_expr: plus_expr minus . mul_expr
   56          | plus_expr minus . error

    error         shift, and go to state 115
    IDENT         shift, and go to state 66
    NUMBER        shift, and go to state 35
    LEFT_BRACKET  shift, and go to state 36
    not           shift, and go to state 37
    minus         shift, and go to state 38

    array_access  go to state 67
    mul_expr      go to state 116
    unary_expr    go to state 51
    primary       go to state 52


State 85

   53 plus_expr: plus_expr plus . mul_expr
   55          | plus_expr plus . error

    error         shift, and go to state 117
    IDENT         shift, and go to state 66
    NUMBER        shift, and go to state 35
    LEFT_BRACKET  shift, and go to state 36
    not           shift, and go to state 37
    minus         shift, and go to state 38

    array_access  go to state 67
    mul_expr      go to state 118
    unary_expr    go to state 51
    primary       go to state 52


State 86

   58 mul_expr: mul_expr division . unary_expr
   59         | mul_expr division . error

    error         shift, and go to state 119
    IDENT         shift, and go to state 66
    NUMBER        shift, and go to state 35
    LEFT_BRACKET  shift, and go to state 36
    not           shift, and go to state 37
    minus         shift, and go to state 38

    array_access  go to state 67
    unary_expr    go to state 120
    primary       go to state 52


State 87

   62 unary_expr: unary_expr inc .

    $default  reduce using rule 62 (unary_expr)


State 88

   63 unary_expr: unary_expr dec .

    $default  reduce using rule 63 (unary_expr)


State 89

   13 declaration: type IDENT SEMICOLON .

    $default  reduce using rule 13 (declaration)


State 90

   14 declaration: type IDENT left_sqBracket . NUMBER right_sqBracket SEMICOLON
   15            | type IDENT left_sqBracket . right_sqBracket ASSIGNMENT STRING SEMICOLON

    NUMBER           shift, and go to state 121
    right_sqBracket  shift, and go to state 122


State 91

   12 declaration_args: declaration_arg COMMA . declaration_args

    VOID  shift, and go to state 1
    INT   shift, and go to state 2
    CHAR  shift, and go to state 3

    $default  reduce using rule 10 (declaration_args)

    declaration_arg   go to state 54
    declaration_args  go to state 123
    type              go to state 56


State 92

    3 main_func: type MAIN LEFT_BRACKET declaration_args RIGHT_BRACKET . LEFT_FIGURE declarations operators RIGHT_FIGURE

    LEFT_FIGURE  shift, and go to state 124


State 93

    8 declaration_arg: type IDENT .
    9                | type IDENT . left_sqBracket right_sqBracket

    left_sqBracket  shift, and go to state 125

    $default  reduce using rule 8 (declaration_arg)


State 94

    6 procedureDeclaration: type IDENT LEFT_BRACKET declaration_args RIGHT_BRACKET .

    $default  reduce using rule 6 (procedureDeclaration)


State 95

   22 arg: IDENT .

    $default  reduce using rule 22 (arg)


State 96

   24 arg: STRING .

    $default  reduce using rule 24 (arg)


State 97

   23 arg: NUMBER .

    $default  reduce using rule 23 (arg)


State 98

   31 OUTP_func: OUTP LEFT_BRACKET arg . RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 126


State 99

   32 INP_func: INP LEFT_BRACKET IDENT . RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 127


State 100

   30 WHILE_cycle: WHILE LEFT_BRACKET statement . RIGHT_BRACKET Code_block

    RIGHT_BRACKET  shift, and go to state 128


State 101

   39 statement: IDENT ASSIGNMENT logical_expr .
   42 logical_expr: logical_expr . not_equal logical_or_expr
   43             | logical_expr . less logical_or_expr
   44             | logical_expr . more logical_or_expr
   45             | logical_expr . compare logical_or_expr
   46             | logical_expr . less_equal logical_or_expr
   47             | logical_expr . more_equal logical_or_expr

    compare     shift, and go to state 76
    not_equal   shift, and go to state 77
    more_equal  shift, and go to state 78
    less_equal  shift, and go to state 79
    more        shift, and go to state 80
    less        shift, and go to state 81

    $default  reduce using rule 39 (statement)


State 102

   37 array_access: IDENT left_sqBracket logical_expr . right_sqBracket
   42 logical_expr: logical_expr . not_equal logical_or_expr
   43             | logical_expr . less logical_or_expr
   44             | logical_expr . more logical_or_expr
   45             | logical_expr . compare logical_or_expr
   46             | logical_expr . less_equal logical_or_expr
   47             | logical_expr . more_equal logical_or_expr

    right_sqBracket  shift, and go to state 129
    compare          shift, and go to state 76
    not_equal        shift, and go to state 77
    more_equal       shift, and go to state 78
    less_equal       shift, and go to state 79
    more             shift, and go to state 80
    less             shift, and go to state 81


State 103

   21 args: args . COMMA arg
   68 primary: IDENT LEFT_BRACKET args . RIGHT_BRACKET

    COMMA          shift, and go to state 130
    RIGHT_BRACKET  shift, and go to state 131


State 104

   20 args: arg .

    $default  reduce using rule 20 (args)


State 105

   67 primary: LEFT_BRACKET statement RIGHT_BRACKET .

    $default  reduce using rule 67 (primary)


State 106

   40 statement: array_access ASSIGNMENT logical_expr .
   42 logical_expr: logical_expr . not_equal logical_or_expr
   43             | logical_expr . less logical_or_expr
   44             | logical_expr . more logical_or_expr
   45             | logical_expr . compare logical_or_expr
   46             | logical_expr . less_equal logical_or_expr
   47             | logical_expr . more_equal logical_or_expr

    compare     shift, and go to state 76
    not_equal   shift, and go to state 77
    more_equal  shift, and go to state 78
    less_equal  shift, and go to state 79
    more        shift, and go to state 80
    less        shift, and go to state 81

    $default  reduce using rule 40 (statement)


State 107

   45 logical_expr: logical_expr compare logical_or_expr .
   49 logical_or_expr: logical_or_expr . or logical_and_expr

    or  shift, and go to state 82

    $default  reduce using rule 45 (logical_expr)


State 108

   42 logical_expr: logical_expr not_equal logical_or_expr .
   49 logical_or_expr: logical_or_expr . or logical_and_expr

    or  shift, and go to state 82

    $default  reduce using rule 42 (logical_expr)


State 109

   47 logical_expr: logical_expr more_equal logical_or_expr .
   49 logical_or_expr: logical_or_expr . or logical_and_expr

    or  shift, and go to state 82

    $default  reduce using rule 47 (logical_expr)


State 110

   46 logical_expr: logical_expr less_equal logical_or_expr .
   49 logical_or_expr: logical_or_expr . or logical_and_expr

    or  shift, and go to state 82

    $default  reduce using rule 46 (logical_expr)


State 111

   44 logical_expr: logical_expr more logical_or_expr .
   49 logical_or_expr: logical_or_expr . or logical_and_expr

    or  shift, and go to state 82

    $default  reduce using rule 44 (logical_expr)


State 112

   43 logical_expr: logical_expr less logical_or_expr .
   49 logical_or_expr: logical_or_expr . or logical_and_expr

    or  shift, and go to state 82

    $default  reduce using rule 43 (logical_expr)


State 113

   49 logical_or_expr: logical_or_expr or logical_and_expr .
   51 logical_and_expr: logical_and_expr . and plus_expr

    and  shift, and go to state 83

    $default  reduce using rule 49 (logical_or_expr)


State 114

   51 logical_and_expr: logical_and_expr and plus_expr .
   53 plus_expr: plus_expr . plus mul_expr
   54          | plus_expr . minus mul_expr
   55          | plus_expr . plus error
   56          | plus_expr . minus error

    minus  shift, and go to state 84
    plus   shift, and go to state 85

    $default  reduce using rule 51 (logical_and_expr)


State 115

   56 plus_expr: plus_expr minus error .

    $default  reduce using rule 56 (plus_expr)


State 116

   54 plus_expr: plus_expr minus mul_expr .
   58 mul_expr: mul_expr . division unary_expr
   59         | mul_expr . division error

    division  shift, and go to state 86

    $default  reduce using rule 54 (plus_expr)


State 117

   55 plus_expr: plus_expr plus error .

    $default  reduce using rule 55 (plus_expr)


State 118

   53 plus_expr: plus_expr plus mul_expr .
   58 mul_expr: mul_expr . division unary_expr
   59         | mul_expr . division error

    division  shift, and go to state 86

    $default  reduce using rule 53 (plus_expr)


State 119

   59 mul_expr: mul_expr division error .

    $default  reduce using rule 59 (mul_expr)


State 120

   58 mul_expr: mul_expr division unary_expr .
   62 unary_expr: unary_expr . inc
   63           | unary_expr . dec

    inc  shift, and go to state 87
    dec  shift, and go to state 88

    $default  reduce using rule 58 (mul_expr)


State 121

   14 declaration: type IDENT left_sqBracket NUMBER . right_sqBracket SEMICOLON

    right_sqBracket  shift, and go to state 132


State 122

   15 declaration: type IDENT left_sqBracket right_sqBracket . ASSIGNMENT STRING SEMICOLON

    ASSIGNMENT  shift, and go to state 133


State 123

   12 declaration_args: declaration_arg COMMA declaration_args .

    $default  reduce using rule 12 (declaration_args)


State 124

    3 main_func: type MAIN LEFT_BRACKET declaration_args RIGHT_BRACKET LEFT_FIGURE . declarations operators RIGHT_FIGURE

    error  shift, and go to state 22
    VOID   shift, and go to state 1
    INT    shift, and go to state 2
    CHAR   shift, and go to state 3

    error         [reduce using rule 16 (declarations)]
    OUTP          reduce using rule 16 (declarations)
    INP           reduce using rule 16 (declarations)
    WHILE         reduce using rule 16 (declarations)
    IDENT         reduce using rule 16 (declarations)
    NUMBER        reduce using rule 16 (declarations)
    LEFT_BRACKET  reduce using rule 16 (declarations)
    RIGHT_FIGURE  reduce using rule 16 (declarations)
    not           reduce using rule 16 (declarations)
    minus         reduce using rule 16 (declarations)

    declaration   go to state 23
    declarations  go to state 134
    type          go to state 25


State 125

    9 declaration_arg: type IDENT left_sqBracket . right_sqBracket

    right_sqBracket  shift, and go to state 135


State 126

   31 OUTP_func: OUTP LEFT_BRACKET arg RIGHT_BRACKET .

    $default  reduce using rule 31 (OUTP_func)


State 127

   32 INP_func: INP LEFT_BRACKET IDENT RIGHT_BRACKET .

    $default  reduce using rule 32 (INP_func)


State 128

   30 WHILE_cycle: WHILE LEFT_BRACKET statement RIGHT_BRACKET . Code_block

    OUTP          shift, and go to state 31
    INP           shift, and go to state 32
    WHILE         shift, and go to state 33
    IDENT         shift, and go to state 34
    NUMBER        shift, and go to state 35
    LEFT_BRACKET  shift, and go to state 36
    LEFT_FIGURE   shift, and go to state 136
    not           shift, and go to state 37
    minus         shift, and go to state 38

    Code_block        go to state 137
    WHILE_cycle       go to state 40
    OUTP_func         go to state 41
    INP_func          go to state 42
    operator          go to state 138
    array_access      go to state 44
    statement         go to state 45
    logical_expr      go to state 46
    logical_or_expr   go to state 47
    logical_and_expr  go to state 48
    plus_expr         go to state 49
    mul_expr          go to state 50
    unary_expr        go to state 51
    primary           go to state 52


State 129

   37 array_access: IDENT left_sqBracket logical_expr right_sqBracket .

    $default  reduce using rule 37 (array_access)


State 130

   21 args: args COMMA . arg

    IDENT   shift, and go to state 95
    STRING  shift, and go to state 96
    NUMBER  shift, and go to state 97

    arg  go to state 139


State 131

   68 primary: IDENT LEFT_BRACKET args RIGHT_BRACKET .

    $default  reduce using rule 68 (primary)


State 132

   14 declaration: type IDENT left_sqBracket NUMBER right_sqBracket . SEMICOLON

    SEMICOLON  shift, and go to state 140


State 133

   15 declaration: type IDENT left_sqBracket right_sqBracket ASSIGNMENT . STRING SEMICOLON

    STRING  shift, and go to state 141


State 134

    3 main_func: type MAIN LEFT_BRACKET declaration_args RIGHT_BRACKET LEFT_FIGURE declarations . operators RIGHT_FIGURE

    error         shift, and go to state 30
    OUTP          shift, and go to state 31
    INP           shift, and go to state 32
    WHILE         shift, and go to state 33
    IDENT         shift, and go to state 34
    NUMBER        shift, and go to state 35
    LEFT_BRACKET  shift, and go to state 36
    not           shift, and go to state 37
    minus         shift, and go to state 38

    RIGHT_FIGURE  reduce using rule 25 (operators)

    operators         go to state 142
    WHILE_cycle       go to state 40
    OUTP_func         go to state 41
    INP_func          go to state 42
    operator          go to state 43
    array_access      go to state 44
    statement         go to state 45
    logical_expr      go to state 46
    logical_or_expr   go to state 47
    logical_and_expr  go to state 48
    plus_expr         go to state 49
    mul_expr          go to state 50
    unary_expr        go to state 51
    primary           go to state 52


State 135

    9 declaration_arg: type IDENT left_sqBracket right_sqBracket .

    $default  reduce using rule 9 (declaration_arg)


State 136

   28 Code_block: LEFT_FIGURE . operators RIGHT_FIGURE

    error         shift, and go to state 30
    OUTP          shift, and go to state 31
    INP           shift, and go to state 32
    WHILE         shift, and go to state 33
    IDENT         shift, and go to state 34
    NUMBER        shift, and go to state 35
    LEFT_BRACKET  shift, and go to state 36
    not           shift, and go to state 37
    minus         shift, and go to state 38

    RIGHT_FIGURE  reduce using rule 25 (operators)

    operators         go to state 143
    WHILE_cycle       go to state 40
    OUTP_func         go to state 41
    INP_func          go to state 42
    operator          go to state 43
    array_access      go to state 44
    statement         go to state 45
    logical_expr      go to state 46
    logical_or_expr   go to state 47
    logical_and_expr  go to state 48
    plus_expr         go to state 49
    mul_expr          go to state 50
    unary_expr        go to state 51
    primary           go to state 52


State 137

   30 WHILE_cycle: WHILE LEFT_BRACKET statement RIGHT_BRACKET Code_block .

    $default  reduce using rule 30 (WHILE_cycle)


State 138

   29 Code_block: operator .

    $default  reduce using rule 29 (Code_block)


State 139

   21 args: args COMMA arg .

    $default  reduce using rule 21 (args)


State 140

   14 declaration: type IDENT left_sqBracket NUMBER right_sqBracket SEMICOLON .

    $default  reduce using rule 14 (declaration)


State 141

   15 declaration: type IDENT left_sqBracket right_sqBracket ASSIGNMENT STRING . SEMICOLON

    SEMICOLON  shift, and go to state 144


State 142

    3 main_func: type MAIN LEFT_BRACKET declaration_args RIGHT_BRACKET LEFT_FIGURE declarations operators . RIGHT_FIGURE

    RIGHT_FIGURE  shift, and go to state 145


State 143

   28 Code_block: LEFT_FIGURE operators . RIGHT_FIGURE

    RIGHT_FIGURE  shift, and go to state 146


State 144

   15 declaration: type IDENT left_sqBracket right_sqBracket ASSIGNMENT STRING SEMICOLON .

    $default  reduce using rule 15 (declaration)


State 145

    3 main_func: type MAIN LEFT_BRACKET declaration_args RIGHT_BRACKET LEFT_FIGURE declarations operators RIGHT_FIGURE .

    $default  reduce using rule 3 (main_func)


State 146

   28 Code_block: LEFT_FIGURE operators RIGHT_FIGURE .

    $default  reduce using rule 28 (Code_block)
